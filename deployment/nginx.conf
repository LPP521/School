# This is the nginx configuration file

# Place this file at: /etc/nginx/sites-enabled/mysitename.conf
# Or simple make a soft-link to link this exact file to site-enabled using this command
# `sudo ln -s <path_of_this_file> /etc/nginx/sites-enabled/mysitename.conf`
# For example: 
# `ln -s /root/School/deployment/nginx.conf /etc/nginx/sites-enabled/school.conf`
# Note: we can also save this file at /etc/nginx/sites-availabed/mysitename.conf as a backup

# Use `service nginx` to see all nginx command
# Note: `service nginx` is a shortcut of `/etc/init.c/nginx`

# use `nginx -t` or `service nginx configtest` to check syntax error for configs in sites-enabled

# Ref: http://exploreflask.com/en/latest/deployment.html
# Ref: https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04
# Ref: (SSL 443 config) https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux 

# Tutorials: [写给开发人员看的Nginx介绍](https://fraserxu.me/2013/06/22/Nginx-for-developers/)

server {
    listen 80;
    # server_name server_domain_or_ip
    # Note:if there is only one server block, server name
    # can be omitted, and all request will be process by
    # this only server
    server_name 47.93.240.135;

    # handle all locations
    location / {
        # pass the request to Gunicorn
        proxy_pass http://127.0.0.1:8000;
        
        # do not rewrite `Location` header of Flask's response
        proxy_redirect off;

        # For streaming request/response like Comet、
        # LongPolling、WebSocket.
        #proxy_buffering off;

        # Set some HTTP headers so that our server
        # knows where the request really came from
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Flask or Django may use Protocal info(http or https)
        # to generate `http` URLS or `https` URLS
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

